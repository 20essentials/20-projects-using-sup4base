---
import { baseUrl } from '@/utils/functions';
const srcCamera = baseUrl('/assets/photoupload.png');
---

<img
  class='am-upload-to-storage'
  src={srcCamera}
  alt='upload'
  title='Save Data'
/>

<style>
  .am-upload-to-storage {
    position: fixed;
    bottom: 1.4vmax;
    left: 1.4vmax;
    width: 3.2vmax;
    transition: opacity 0.2s ease-in-out;

    &:active {
      opacity: 0.5;
    }
  }
</style>

<script>
  import { $ } from '@/utils/functions';
import { supabase } from '@/lib/supabase';

const $containerWithImage = $('.container-img-portada') as HTMLElement;
const $inputPrice = $('.am-input.price') as HTMLInputElement;
const $characterName = $('.character-name') as HTMLInputElement;
const $inputFile = $('#input-upload-image') as HTMLInputElement;

let lastFile: File | null = null;

$inputFile.addEventListener('change', (e: Event) => {
  const target = e.target as HTMLInputElement;
  const file = target.files?.[0];
  if (!file) return;
  lastFile = file;

  const imageURL = URL.createObjectURL(file);
  $containerWithImage.style.setProperty('--bg', `url("${imageURL}")`);
});

document.addEventListener('click', async e => {
  const target = e.target as HTMLElement;
  if (!target.matches('.am-upload-to-storage')) return;

  if (!lastFile) {
    alert('Primero selecciona una imagen para subir.');
    return;
  }

  const price = $inputPrice.value.trim().replace(/\D/g, '');
  const name = $characterName.value.trim().replace(/[^a-zA-Z0-9_-]/g, '_');

  const { data: { user }, error: userError } = await supabase.auth.getUser();
  if (userError || !user) {
    alert('Usuario no autenticado.');
    return;
  }

  const userId = user.id;

  // --- 1. Eliminar todas las im치genes existentes del usuario ---
  const { data: existingFiles, error: listError } = await supabase.storage
    .from('project-8-bucket')
    .list(`images/${userId}/`);

  if (listError) {
    console.error('Error listando im치genes del usuario:', listError);
  } else if (existingFiles && existingFiles.length > 0) {
    const pathsToDelete = existingFiles.map(file => `images/${userId}/${file.name}`);
    const { error: removeError } = await supabase.storage
      .from('project-8-bucket')
      .remove(pathsToDelete);

    if (removeError) {
      console.error('Error eliminando im치genes existentes:', removeError);
      alert('No se pudieron eliminar las im치genes anteriores.');
      return;
    }
  }

  // --- 2. Subir la nueva imagen ---
  const extension = lastFile.name.split('.').pop();
  const fileName = `${name}-${price}.${extension}`;
  const filePath = `images/${userId}/${fileName}`;

  const { error } = await supabase.storage
    .from('project-8-bucket')
    .upload(filePath, lastFile, {
      cacheControl: '3600',
      upsert: true
    });

  if (error) {
    console.error('Error al subir la imagen:', error);
    alert('Error al subir la imagen a Supabase.');
    return;
  }

  alert('Imagen subida correctamente a Supabase.');
});
</script>
